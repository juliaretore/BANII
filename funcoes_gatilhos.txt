---------------------------	FUNCOES E GATILHOS  ----------------------
----------------------------------------------------------------------
-- 1) Fatualizar a multa dependendo do atraso (não pode cobrar multa de professores em tempo integral)

create or replace function atualiza_multas() returns void as
$$
declare item record;
declare dias_atrasados real;
declare valor_multa real;
declare nome_categoria varchar(100);
declare turno_usuario varchar(40);
begin
	for item in select * from emprestimo loop
		if(item.data_real_entr is null) then
			if(current_date > item.data_est_entr) then
				nome_categoria := (select c.nome from categoria c join usuario u on c.id=u.id_categoria where u.id=item.id);
				turno_usuario := (select u.turno from usuario u join emprestimo e on u.id=e.id_usuario where e.id=item.id);
				if (turno_usuario='Integral' and (nome_categoria = 'Professor' or  nome_categoria = 'Professor Pós-Graduação'))  then
				else
					dias_atrasados := (select (current_date - item.data_est_entr) from emprestimo where id=item.id);
					valor_multa := dias_atrasados * 0.5;			
					update emprestimo set multa=valor_multa, pagamento_multa=1  where id=item.id;
					
				end if;
			end if;	
		end if;
	end loop;
end;
$$ language plpgsql;

select atualiza_multas()


---------------------------------------------------------------------------------------------
-- 2) permitir o empréstimo só se: usuario não tem livros atrasados, não tem multas, não excedeu o nmr max de emprestimos, 
-- se o exemplar está disponível (emprestimo/reserva) e se NAO for um exemplar da coleção de reserva

create or replace function cadastro_emprestimo(cid_exemplar int, cid_usuario int, cid_funcionario int) returns void as
$$
declare tempo_empr_usu int;
begin 
	tempo_empr_usu := (select c.tempo_empr from categoria c join usuario u on u.id_categoria=c.id where u.id=cid_usuario);
	insert into emprestimo values ((select nextval('id_emprestimo')), 0, 0, 0, current_date, current_date+tempo_empr_usu, NULL, cid_exemplar, cid_usuario, cid_funcionario, 0);
end;
$$ language plpgsql;

create or replace function cadastro_emprestimo() returns trigger as
$$
declare livros_atrasados int;
declare multas real;
declare nmr_max_est int;
declare nmr_emprestimos int;
declare tempo_empr_usu int;
declare esta_reservado int;
declare esta_emprestado int;
declare colecao_exemplar varchar(100);
begin 
	livros_atrasados := (select count(*) from emprestimo where situacao=0 and current_date > data_est_entr and id_usuario=new.id_usuario);
	multas := (select count(*) from emprestimo where id_usuario=new.id_usuario and pagamento_multa=1);
	nmr_max_est := (select c.qnt_max_empr from categoria c join usuario u on u.id_categoria=c.id where u.id=new.id_usuario);
	nmr_emprestimos := (select count(*) from emprestimo where situacao=0 and id_usuario=new.id_usuario);
	esta_reservado := (select id_usuario_reserva from exemplar where id=new.id_exemplar);
	esta_emprestado := (select id_usuario from emprestimo where situacao=0 and id_exemplar=new.id_exemplar);
	colecao_exemplar := (select colecao from exemplar where id=new.id_exemplar);

	if (livros_atrasados = 0) then
		if(multas = 0 or multas is not distinct from NULL) then
			if(nmr_emprestimos < nmr_max_est) then	
				if(esta_emprestado is not distinct from NULL) then
					if(esta_reservado is null) then
						if (colecao_exemplar != 'Reserva') then
							return new;
						else
							raise exception 'Cadastro negado. Exemplar escolhido pertence à coleção de reserva.';
						end if;
					else
						raise exception 'Cadastro negado. Exemplar escolhido está reservado.';
					end if;
				else
					raise exception 'Cadastro negado. Exemplar escolhido está emprestado.';
				end if;
			else
				raise exception 'Cadastro negado. Usuario excedeu o número máximo de emprestimos.';
			end if;
		else
			raise exception 'Cadastro negado. Usuario tem multas não pagas.';
		end if;
	else
		raise exception 'Cadastro negado. Usuario tem livros atrasados.';
	end if;
	return null;
end;
$$ language plpgsql;

create trigger cadastro_emprestimo  before insert on emprestimo for each row execute procedure cadastro_emprestimo();


---------------------------------------------------------------------------------------------
-- 3) permitir a renovação no máximo 3 vezes e ao aumentar a renovação, aumentar a data_est_entrega

create or replace function renovar_emprestimo(id_emprestimo int) returns void as
$$
declare tempo_empr_usu int;
begin
	if (select renovacoes from emprestimo where id=id_emprestimo) < 3 then
		update emprestimo set renovacoes=renovacoes+1 where id=id_emprestimo;
		tempo_empr_usu := (select c.tempo_empr from categoria c join usuario u on u.id_categoria=c.id where u.id=(select id_usuario from emprestimo where id=id_emprestimo));
		update emprestimo set data_est_entr=data_est_entr+tempo_empr_usu where id=id_emprestimo;
	else
		raise exception 'Numero máximo de renovações atingido.';
	end if;
end;
$$ language plpgsql;


---------------------------------------------------------------------------------------------
-- 4) cancelar a reserva caso passe do tempo limite de 7 dias (se tiver, passar para o proximo da fila de reservas)

create or replace function verifica_datas_reservas() returns void as
$$
declare item record;
declare proximo_fila int;
begin
for item in select * from exemplar loop
		if(current_date-item.data_reserva>7) then
			proximo_fila := (select proximo_fila_reserva(item.id_livro));
			if proximo_fila is null then
				update exemplar set id_usuario_reserva=NULL, data_reserva=NULL where id=item.id;
			else
				update exemplar set id_usuario_reserva=proximo_fila, data_reserva=current_date where id=item.id;
				delete from reservas_livro where id_livro=item.id_livro and id_usuario=proximo_fila;	
			end if;
		end if;
	end loop;
end;
$$ language plpgsql;

select verifica_datas_reservas()


---------------------------------------------------------------------------------------------
-- 5) Função que retorna o o próximo da fila de reserva para determinado livro

create or replace function proximo_fila_reserva(livro int) returns int as
$$
declare usuario_reserva int;
begin
	usuario_reserva := (select id_usuario from reservas_livro where id_livro=livro order by data_reserva limit 1);
	return usuario_reserva;
end;
$$ language plpgsql;


---------------------------------------------------------------------------------------------
-- 6) Função de Devolução:
-- Mudar a situacao do emprestimo para 1, mudar a data_real_entr para a data atual 
-- Verificar se alguem reservou esse livro, se sim, reserva para o usuário.

create or replace function devolucao_emprestimo(id_emprestimo int) returns void as
$$
declare item record;
declare usuario_reserva int;
declare livro int;
declare exemplar_emprestimo int;
begin
	update emprestimo set situacao=1, data_real_entr=current_date where id=id_emprestimo;
	exemplar_emprestimo := (select id_exemplar from emprestimo where id=id_emprestimo);
	livro := (select id_livro from exemplar where id=exemplar_emprestimo);
	usuario_reserva := (select proximo_fila_reserva(livro));
	if usuario_reserva is not null then
		update exemplar set id_usuario_reserva=usuario_reserva, data_reserva=current_date where id=exemplar_emprestimo;
		delete from reservas_livro where id_livro=livro and id_usuario=usuario_reserva;
	end if;
end;
$$ language plpgsql;


---------------------------------------------------------------------------------------------
-- 7) Função Empréstimo de Livro Reservado:
-- ao realizar um emprestimo para o usuario que havia reservado o exemplar, mudar os campos de reserva do exemplar para NULL
-- e inserir o emprestimo;
create or replace function cadastro_emprestimo_reserva(cid_exemplar int, cid_usuario int, cid_funcionario int) returns void as
$$
begin 
	update exemplar set id_usuario_reserva=NULL, data_reserva=NULL where id=cid_exemplar;
	perform (cadastro_emprestimo(cid_exemplar, cid_usuario, cid_funcionario));
end;
$$ language plpgsql;


---------------------------------------------------------------------------------------------
-- 8) Trigger para colocar a data corrente no registro de cadastro

create or replace function cadastro_reserva() returns trigger as
$$
begin 
	new.data_reserva = current_date;
	return new;
end;
$$ language plpgsql;

create trigger cadastro_reserva  before insert on reservas_livro for each row execute procedure cadastro_reserva();


---------------------------------------------------------------------------------------------
-- 9) Pagamento de Multa

create or replace function pagamento_multas(cid_usuario int) returns void as
$$
declare item record;
begin 
	for item in select * from emprestimo loop
		if item.id_usuario=cid_usuario and item.situacao=1 then
			update emprestimo set pagamento_multa=0 where id=item.id;
		end if;
	end loop;

end;
$$ language plpgsql;
